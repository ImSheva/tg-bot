import os
import psycopg2
from telegram import ReplyKeyboardMarkup, Update
from telegram.ext import Application, CommandHandler, MessageHandler, ConversationHandler, ContextTypes, filters


ROLE, SALES_TEAM, REQUESTS, CONTACT_INFO, PHONE, EMAIL, END_CONV = range(7)


DATABASE_URL = os.getenv("DATABASE_URL")
BOT_TOKEN = os.getenv("BOT_TOKEN")
KOYEB_APP_NAME = os.getenv("KOYEB_APP_NAME")

if not KOYEB_APP_NAME:
    raise ValueError("–ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è –æ–∫—Ä—É–∂–µ–Ω–∏—è KOYEB_APP_NAME –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –æ–Ω–∞ –∑–∞–¥–∞–Ω–∞ –Ω–∞ Koyeb.")

from psycopg2 import pool

db_pool = None

def initialize_database():
    global db_pool
    try:
        db_pool = psycopg2.pool.SimpleConnectionPool(
            1, 20, DATABASE_URL  # –ú–∏–Ω–∏–º—É–º 1, –º–∞–∫—Å–∏–º—É–º 20 —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π
        )
        conn = db_pool.getconn()
        cursor = conn.cursor()
        cursor.execute("""
        CREATE TABLE IF NOT EXISTS applications (
            id SERIAL PRIMARY KEY,
            role TEXT,
            sales_team TEXT,
            requests TEXT,
            name TEXT,
            phone TEXT,
            email TEXT
        );
        """)
        conn.commit()
        cursor.close()
        db_pool.putconn(conn)
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: {e}")
        exit(1)


# def initialize_database():
#     try:
#         conn = psycopg2.connect(DATABASE_URL)
#         cursor = conn.cursor()
#         cursor.execute("""
#         CREATE TABLE IF NOT EXISTS applications (
#             id SERIAL PRIMARY KEY,
#             role TEXT,
#             sales_team TEXT,
#             requests TEXT,
#             name TEXT,
#             phone TEXT,
#             email TEXT
#         );
#         """)
#         conn.commit()
#         cursor.close()
#         conn.close()
#     except Exception as e:
#         print(f"–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: {e}")
#         exit(1)


async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ!\n\n"
        "–Ø - –ï–≤–≥–µ–Ω–∏–π –®–µ–≤—á–µ–Ω–∫–æ, –∞ —ç—Ç–æ –º–æ–π –±–æ—Ç-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç. –Ø —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä—É—é—Å—å –Ω–∞ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å–∏–ª—å–Ω—ã—Ö –æ—Ç–¥–µ–ª–æ–≤ –ø—Ä–æ–¥–∞–∂ –¥–ª—è –í–∞—à–µ–≥–æ –±–∏–∑–Ω–µ—Å–∞.\n"
        "–ê –í—ã, —è —Ç–∞–∫ –ø–æ–ª–∞–≥–∞—é, —Ç–æ—Ç —Å–∞–º—ã–π —Å–æ–±—Å—Ç–≤–µ–Ω–Ω–∏–∫ –∏–ª–∏ —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—å, –∑–∞–∏–Ω—Ç–µ—Ä–µ—Å–æ–≤–∞–Ω–Ω—ã–π –≤ —Ä–æ—Å—Ç–µ –í–∞—à–µ–≥–æ –±–∏–∑–Ω–µ—Å–∞. –ß—Ç–æ –∂, –¥–æ –Ω–∞—à–µ–π –ª–∏—á–Ω–æ–π –≤—Å—Ç—Ä–µ—á–∏, –æ—Å—Ç–∞–ª–æ—Å—å —Å–æ–≤—Å–µ–º –Ω–µ–º–Ω–æ–≥–æ.\n\n"
        "–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É ¬´–£—á–∞—Å—Ç–≤–æ–≤–∞—Ç—å¬ª, —á—Ç–æ–±—ã –∑–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –ë–ï–°–ü–õ–ê–¢–ù–£–Æ –°–ï–°–°–ò–Æ —Å–æ –º–Ω–æ–π.\n\n"
        "üëáüëáüëá",
        reply_markup=ReplyKeyboardMarkup([["–£—á–∞—Å—Ç–≤–æ–≤–∞—Ç—å"]], one_time_keyboard=True),
    )
    return ROLE

async def ask_role(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "–ü—Ä–µ–∂–¥–µ, —á–µ–º –º—ã –≤—Å—Ç—Ä–µ—Ç–∏–º—Å—è, —Ä–∞—Å—Å–∫–∞–∂–∏—Ç–µ –Ω–µ–º–Ω–æ–≥–æ –æ —Å–µ–±–µ!\n\n"
        "–ö–∞–∫–∞—è –í–∞—à–∞ —Ä–æ–ª—å –≤ –∫–æ–º–ø–∞–Ω–∏–∏?",
        reply_markup=ReplyKeyboardMarkup(
            [
                ["–°–æ–±—Å—Ç–≤–µ–Ω–Ω–∏–∫ –±–∏–∑–Ω–µ—Å–∞", "–†—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—å / –¢–û–ü –º–µ–Ω–µ–¥–∂–µ—Ä"],
                ["–ë–∏–∑–Ω–µ—Å —Ç—Ä–µ–Ω–µ—Ä /HR", "–ò–Ω–æ–π —Å–æ—Ç—Ä—É–¥–Ω–∏–∫"],
            ],
            one_time_keyboard=True,
        ),
    )
    return SALES_TEAM

async def ask_sales_team(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data["role"] = update.message.text
    await update.message.reply_text(
        "–°–∫–æ–ª—å–∫–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤ —Ä–∞–±–æ—Ç–∞–µ—Ç –≤ –í–∞—à–µ–º –æ—Ç–¥–µ–ª–µ –ø—Ä–æ–¥–∞–∂?",
        reply_markup=ReplyKeyboardMarkup(
            [
                ["0 ‚Äì 5 —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤", "5 ‚Äì 10 —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤"],
                ["10 ‚Äì 25 —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤", "25 ‚Äì 50 —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤"],
                ["–±–æ–ª–µ–µ 50 —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤"],
            ],
            one_time_keyboard=True,
        ),
    )
    return REQUESTS

async def ask_requests(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data["sales_team"] = update.message.text
    await update.message.reply_text(
        "–ö–∞–∫–∏–µ –∑–∞–¥–∞—á–∏ / –∑–∞–ø—Ä–æ—Å—ã –¥–ª—è –í–∞—Å —Å–µ–π—á–∞—Å –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –∞–∫—Ç—É–∞–ª—å–Ω—ã?",
        reply_markup=ReplyKeyboardMarkup(
            [
                ["–•–æ—á—É –ø–æ–Ω—è—Ç—å, –∫–∞–∫ –¥–æ–ª–∂–µ–Ω —Ä–∞–±–æ—Ç–∞—Ç—å –û—Ç–¥–µ–ª –ü—Ä–æ–¥–∞–∂."],
                ["–ó–∞–ø—Ä–æ—Å –≤ —Å–æ–∑–¥–∞–Ω–∏–∏ –æ—Ç–¥–µ–ª–∞ —Å –Ω—É–ª—è. –ù—É–∂–µ–Ω –†–û–ü."],
                ["–ó–∞–ø—Ä–æ—Å –≤ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å–∏—Å—Ç–µ–º—ã –ø—Ä–æ–¥–∞–∂. –°–µ–π—á–∞—Å –≤—Å–µ —Ä–∞–±–æ—Ç–∞–µ—Ç —Ö–∞–æ—Ç–∏—á–Ω–æ."],
                ["–ó–∞–ø—Ä–æ—Å –≤ –Ω–∞–π–º–µ –†–û–ü–∞. –ù—É–∂–µ–Ω —Å–∏–ª—å–Ω—ã–π –†–û–ü –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ –æ—Ç–¥–µ–ª–∞ –ø—Ä–æ–¥–∞–∂."],
                ["–ó–∞–ø—Ä–æ—Å –≤ –Ω–∞–π–º–µ –∫–æ–º–∞–Ω–¥—ã. –ù—É–∂–Ω—ã —Å–∏–ª—å–Ω—ã–µ –ü—Ä–æ–¥–∞–≤—Ü—ã."],
                ["–ó–∞–ø—Ä–æ—Å –≤ –æ–±—É—á–µ–Ω–∏–∏. –ù—É–∂–Ω–æ –æ–±—É—á–µ–Ω–∏–µ –ø—Ä–æ–¥–∞–∂–∞–º."],
                ["–î—Ä—É–≥–æ–µ"],
            ],
            one_time_keyboard=True,
        ),
    )
    return CONTACT_INFO

async def get_contact_info(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data['requests'] = update.message.text
    await update.message.reply_text("–°–ø–∞—Å–∏–±–æ –∑–∞ –í–∞—à–∏ –æ—Ç–≤–µ—Ç—ã. –û—Å—Ç–∞–≤—å—Ç–µ —Å–≤–æ–∏ –∫–æ–Ω—Ç–∞–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ.\n\n –í–∞—à–µ –∏–º—è:")
    return PHONE

async def get_phone(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data['name'] = update.message.text
    await update.message.reply_text("–£–∫–∞–∂–∏—Ç–µ —Å–≤–æ–π –Ω–æ–º–µ—Ä, –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –≤ WhatsApp –∏–ª–∏ Telegram")
    return EMAIL

async def get_email(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data['phone'] = update.message.text
    await update.message.reply_text("–£–∫–∞–∂–∏—Ç–µ —Å–≤–æ–π e-mail")
    return END_CONV

async def end_conv(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data['email'] = update.message.text

    try:
        # –û—Ç–∫—Ä—ã–≤–∞–µ–º –Ω–æ–≤–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –¥–ª—è –∑–∞–ø–∏—Å–∏ –¥–∞–Ω–Ω—ã—Ö
        conn = psycopg2.connect(DATABASE_URL)
        cursor = conn.cursor()
        cursor.execute(
            "INSERT INTO applications (role, sales_team, requests, name, phone, email) VALUES (%s, %s, %s, %s, %s, %s)",
            (
                context.user_data["role"],
                context.user_data["sales_team"],
                context.user_data["requests"],
                context.user_data["name"],
                context.user_data["phone"],
                context.user_data["email"],
            ),
        )
        conn.commit()
        cursor.close()
        conn.close()

        await update.message.reply_text(
            "–°–ø–∞—Å–∏–±–æ –∑–∞ –∑–∞—è–≤–∫—É! –í —Å–∞–º–æ–µ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è —è —Å–≤—è–∂—É—Å—å —Å –í–∞–º–∏ –¥–ª—è —Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏ –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è –°–µ—Å—Å–∏–∏. –î–æ —Å–∫–æ—Ä–æ–π –≤—Å—Ç—Ä–µ—á–∏!"
        )
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö: {e}")
        await update.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.")
    return ConversationHandler.END


def main():
    initialize_database()
    application = Application.builder().token(BOT_TOKEN).build()

    conv_handler = ConversationHandler(
        entry_points=[CommandHandler("start", start)],
        states={
            ROLE: [MessageHandler(filters.TEXT & ~filters.COMMAND, ask_role)],
            SALES_TEAM: [MessageHandler(filters.TEXT & ~filters.COMMAND, ask_sales_team)],
            REQUESTS: [MessageHandler(filters.TEXT & ~filters.COMMAND, ask_requests)],
            CONTACT_INFO: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_contact_info)],
            PHONE: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_phone)],
            EMAIL: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_email)],
            END_CONV: [MessageHandler(filters.TEXT & ~filters.COMMAND, end_conv)],
        },
        fallbacks=[],
    )

    application.add_handler(conv_handler)

    PORT = int(os.environ.get("PORT", 8000))
    print(PORT, KOYEB_APP_NAME)
 
    application.run_webhook(
        listen="0.0.0.0",
        port=PORT,
        webhook_url = f"http://{KOYEB_APP_NAME}.koyeb.app/{BOT_TOKEN}",
    )
    # application.run_polling()

if __name__ == "__main__":
    main()
